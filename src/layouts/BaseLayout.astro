---
import type { SEOProps } from '../utils/seo';
import { generateSEOTags } from '../utils/seo';
import '../styles/global.css';

interface Props {
  seo: SEOProps;
}

const { seo } = Astro.props;
const seoTags = generateSEOTags(seo);
---

<!DOCTYPE html>
<html lang="id" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- SEO Tags -->
    <title>{seoTags.title}</title>
    <meta name="description" content={seoTags.description} />
    {seoTags.canonical && <link rel="canonical" href={seoTags.canonical} />}
    <meta name="robots" content={seoTags.robots} />
    
    <!-- Open Graph -->
    <meta property="og:title" content={seoTags.openGraph.title} />
    <meta property="og:description" content={seoTags.openGraph.description} />
    <meta property="og:type" content={seoTags.openGraph.type} />
    <meta property="og:url" content={seoTags.openGraph.url} />
    <meta property="og:image" content={seoTags.openGraph.image} />
    <meta property="og:image:alt" content={seoTags.openGraph.imageAlt} />
    <meta property="og:site_name" content={seoTags.openGraph.siteName} />
    {seoTags.openGraph.publishedTime && (
      <meta property="article:published_time" content={seoTags.openGraph.publishedTime} />
    )}
    {seoTags.openGraph.modifiedTime && (
      <meta property="article:modified_time" content={seoTags.openGraph.modifiedTime} />
    )}
    {seoTags.openGraph.author && (
      <meta property="article:author" content={seoTags.openGraph.author} />
    )}
    {seoTags.openGraph.tags?.map((tag) => (
      <meta property="article:tag" content={tag} />
    ))}
    
    <!-- Twitter -->
    <meta name="twitter:card" content={seoTags.twitter.card} />
    <meta name="twitter:title" content={seoTags.twitter.title} />
    <meta name="twitter:description" content={seoTags.twitter.description} />
    <meta name="twitter:image" content={seoTags.twitter.image} />
    <meta name="twitter:image:alt" content={seoTags.twitter.imageAlt} />
    
    <!-- Dark mode script -->
    <script is:inline>
      if (
        localStorage.getItem('theme') === 'dark' ||
        (!localStorage.getItem('theme') &&
          window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
  </head>
  <body class="min-h-screen flex flex-col dark-mode-transition">
    <slot name="header" />
    <main class="flex-grow">
      <slot />
    </main>
    <slot name="footer" />
    
    <!-- Dark mode toggle script -->
    <script>
      function toggleDarkMode() {
        const html = document.documentElement;
        html.classList.toggle('dark');
        localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
      }
      
      // Expose the function globally
      (window as any).toggleDarkMode = toggleDarkMode;
    </script>
  </body>
</html>
